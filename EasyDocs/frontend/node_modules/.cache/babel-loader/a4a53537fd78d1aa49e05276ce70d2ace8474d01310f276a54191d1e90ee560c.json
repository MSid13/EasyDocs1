{"ast":null,"code":"/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs'; // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel';\nimport * as time from 'lib0/time';\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as syncProtocol from 'y-protocols/sync';\nimport * as authProtocol from 'y-protocols/auth';\nimport * as awarenessProtocol from 'y-protocols/awareness';\nimport { Observable } from 'lib0/observable';\nimport * as math from 'lib0/math';\nimport * as url from 'lib0/url';\nexport const messageSync = 0;\nexport const messageQueryAwareness = 3;\nexport const messageAwareness = 1;\nexport const messageAuth = 2;\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = [];\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, _messageType) => {\n  encoding.writeVarUint(encoder, messageSync);\n  const syncMessageType = syncProtocol.readSyncMessage(decoder, encoder, provider.doc, provider);\n  if (emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 && !provider.synced) {\n    provider.synced = true;\n  }\n};\nmessageHandlers[messageQueryAwareness] = (encoder, _decoder, provider, _emitSynced, _messageType) => {\n  encoding.writeVarUint(encoder, messageAwareness);\n  encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())));\n};\nmessageHandlers[messageAwareness] = (_encoder, decoder, provider, _emitSynced, _messageType) => {\n  awarenessProtocol.applyAwarenessUpdate(provider.awareness, decoding.readVarUint8Array(decoder), provider);\n};\nmessageHandlers[messageAuth] = (_encoder, decoder, provider, _emitSynced, _messageType) => {\n  authProtocol.readAuthMessage(decoder, provider.doc, (_ydoc, reason) => permissionDeniedHandler(provider, reason));\n};\n\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000;\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) => console.warn(`Permission denied to access ${provider.url}.\\n${reason}`);\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf);\n  const encoder = encoding.createEncoder();\n  const messageType = decoding.readVarUint(decoder);\n  const messageHandler = provider.messageHandlers[messageType];\n  if ((/** @type {any} */messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType);\n  } else {\n    console.error('Unable to compute message');\n  }\n  return encoder;\n};\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = provider => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url);\n    websocket.binaryType = 'arraybuffer';\n    provider.ws = websocket;\n    provider.wsconnecting = true;\n    provider.wsconnected = false;\n    provider.synced = false;\n    websocket.onmessage = event => {\n      provider.wsLastMessageReceived = time.getUnixTime();\n      const encoder = readMessage(provider, new Uint8Array(event.data), true);\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder));\n      }\n    };\n    websocket.onerror = event => {\n      provider.emit('connection-error', [event, provider]);\n    };\n    websocket.onclose = event => {\n      provider.emit('connection-close', [event, provider]);\n      provider.ws = null;\n      provider.wsconnecting = false;\n      if (provider.wsconnected) {\n        provider.wsconnected = false;\n        provider.synced = false;\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter(client => client !== provider.doc.clientID), provider);\n        provider.emit('status', [{\n          status: 'disconnected'\n        }]);\n      } else {\n        provider.wsUnsuccessfulReconnects++;\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // using exponential backoff starting with 100ms\n      setTimeout(setupWS, math.min(math.pow(2, provider.wsUnsuccessfulReconnects) * 100, provider.maxBackoffTime), provider);\n    };\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime();\n      provider.wsconnecting = false;\n      provider.wsconnected = true;\n      provider.wsUnsuccessfulReconnects = 0;\n      provider.emit('status', [{\n        status: 'connected'\n      }]);\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder();\n      encoding.writeVarUint(encoder, messageSync);\n      syncProtocol.writeSyncStep1(encoder, provider.doc);\n      websocket.send(encoding.toUint8Array(encoder));\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder();\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness);\n        encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [provider.doc.clientID]));\n        websocket.send(encoding.toUint8Array(encoderAwarenessState));\n      }\n    };\n    provider.emit('status', [{\n      status: 'connecting'\n    }]);\n  }\n};\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */provider.ws.send(buf);\n  }\n  if (provider.bcconnected) {\n    bc.publish(provider.bcChannel, buf, provider);\n  }\n};\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   * @param {number} [opts.maxBackoffTime] Maximum amount of time to wait before trying to reconnect (we try to reconnect using exponential backoff)\n   * @param {boolean} [opts.disableBc] Disable cross-tab BroadcastChannel communication\n   */\n  constructor(serverUrl, roomname, doc, {\n    connect = true,\n    awareness = new awarenessProtocol.Awareness(doc),\n    params = {},\n    WebSocketPolyfill = WebSocket,\n    resyncInterval = -1,\n    maxBackoffTime = 2500,\n    disableBc = false\n  } = {}) {\n    super();\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1);\n    }\n    const encodedParams = url.encodeQueryParams(params);\n    this.maxBackoffTime = maxBackoffTime;\n    this.bcChannel = serverUrl + '/' + roomname;\n    this.url = serverUrl + '/' + roomname + (encodedParams.length === 0 ? '' : '?' + encodedParams);\n    this.roomname = roomname;\n    this.doc = doc;\n    this._WS = WebSocketPolyfill;\n    this.awareness = awareness;\n    this.wsconnected = false;\n    this.wsconnecting = false;\n    this.bcconnected = false;\n    this.disableBc = disableBc;\n    this.wsUnsuccessfulReconnects = 0;\n    this.messageHandlers = messageHandlers.slice();\n    /**\n     * @type {boolean}\n     */\n    this._synced = false;\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null;\n    this.wsLastMessageReceived = 0;\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect;\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0;\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder();\n          encoding.writeVarUint(encoder, messageSync);\n          syncProtocol.writeSyncStep1(encoder, doc);\n          this.ws.send(encoding.toUint8Array(encoder));\n        }\n      }, resyncInterval);\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     * @param {any} origin\n     */\n    this._bcSubscriber = (data, origin) => {\n      if (origin !== this) {\n        const encoder = readMessage(this, new Uint8Array(data), false);\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder), this);\n        }\n      }\n    };\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder();\n        encoding.writeVarUint(encoder, messageSync);\n        syncProtocol.writeUpdate(encoder, update);\n        broadcastMessage(this, encoding.toUint8Array(encoder));\n      }\n    };\n    this.doc.on('update', this._updateHandler);\n    /**\n     * @param {any} changed\n     * @param {any} _origin\n     */\n    this._awarenessUpdateHandler = ({\n      added,\n      updated,\n      removed\n    }, _origin) => {\n      const changedClients = added.concat(updated).concat(removed);\n      const encoder = encoding.createEncoder();\n      encoding.writeVarUint(encoder, messageAwareness);\n      encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients));\n      broadcastMessage(this, encoding.toUint8Array(encoder));\n    };\n    this._unloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(this.awareness, [doc.clientID], 'window unload');\n    };\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unload', this._unloadHandler);\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._unloadHandler);\n    }\n    awareness.on('update', this._awarenessUpdateHandler);\n    this._checkInterval = /** @type {any} */setInterval(() => {\n      if (this.wsconnected && messageReconnectTimeout < time.getUnixTime() - this.wsLastMessageReceived) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */\n        this.ws.close();\n      }\n    }, messageReconnectTimeout / 10);\n    if (connect) {\n      this.connect();\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced() {\n    return this._synced;\n  }\n  set synced(state) {\n    if (this._synced !== state) {\n      this._synced = state;\n      this.emit('synced', [state]);\n      this.emit('sync', [state]);\n    }\n  }\n  destroy() {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval);\n    }\n    clearInterval(this._checkInterval);\n    this.disconnect();\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('unload', this._unloadHandler);\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._unloadHandler);\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler);\n    this.doc.off('update', this._updateHandler);\n    super.destroy();\n  }\n  connectBc() {\n    if (this.disableBc) {\n      return;\n    }\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber);\n      this.bcconnected = true;\n    }\n    // send sync step1 to bc\n    // write sync step 1\n    const encoderSync = encoding.createEncoder();\n    encoding.writeVarUint(encoderSync, messageSync);\n    syncProtocol.writeSyncStep1(encoderSync, this.doc);\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync), this);\n    // broadcast local state\n    const encoderState = encoding.createEncoder();\n    encoding.writeVarUint(encoderState, messageSync);\n    syncProtocol.writeSyncStep2(encoderState, this.doc);\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderState), this);\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder();\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness);\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessQuery), this);\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder();\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness);\n    encoding.writeVarUint8Array(encoderAwarenessState, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID]));\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderAwarenessState), this);\n  }\n  disconnectBc() {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder();\n    encoding.writeVarUint(encoder, messageAwareness);\n    encoding.writeVarUint8Array(encoder, awarenessProtocol.encodeAwarenessUpdate(this.awareness, [this.doc.clientID], new Map()));\n    broadcastMessage(this, encoding.toUint8Array(encoder));\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber);\n      this.bcconnected = false;\n    }\n  }\n  disconnect() {\n    this.shouldConnect = false;\n    this.disconnectBc();\n    if (this.ws !== null) {\n      this.ws.close();\n    }\n  }\n  connect() {\n    this.shouldConnect = true;\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this);\n      this.connectBc();\n    }\n  }\n}","map":{"version":3,"names":["Y","bc","time","encoding","decoding","syncProtocol","authProtocol","awarenessProtocol","Observable","math","url","messageSync","messageQueryAwareness","messageAwareness","messageAuth","messageHandlers","encoder","decoder","provider","emitSynced","_messageType","writeVarUint","syncMessageType","readSyncMessage","doc","messageYjsSyncStep2","synced","_decoder","_emitSynced","writeVarUint8Array","encodeAwarenessUpdate","awareness","Array","from","getStates","keys","_encoder","applyAwarenessUpdate","readVarUint8Array","readAuthMessage","_ydoc","reason","permissionDeniedHandler","messageReconnectTimeout","console","warn","readMessage","buf","createDecoder","createEncoder","messageType","readVarUint","messageHandler","error","setupWS","shouldConnect","ws","websocket","_WS","binaryType","wsconnecting","wsconnected","onmessage","event","wsLastMessageReceived","getUnixTime","Uint8Array","data","length","send","toUint8Array","onerror","emit","onclose","removeAwarenessStates","filter","client","clientID","status","wsUnsuccessfulReconnects","setTimeout","min","pow","maxBackoffTime","onopen","writeSyncStep1","getLocalState","encoderAwarenessState","broadcastMessage","bcconnected","publish","bcChannel","WebsocketProvider","constructor","serverUrl","roomname","connect","Awareness","params","WebSocketPolyfill","WebSocket","resyncInterval","disableBc","slice","encodedParams","encodeQueryParams","_synced","_resyncInterval","setInterval","readyState","OPEN","_bcSubscriber","origin","_updateHandler","update","writeUpdate","on","_awarenessUpdateHandler","added","updated","removed","_origin","changedClients","concat","_unloadHandler","window","addEventListener","process","_checkInterval","close","state","destroy","clearInterval","disconnect","removeEventListener","off","connectBc","subscribe","encoderSync","encoderState","writeSyncStep2","encoderAwarenessQuery","disconnectBc","Map","unsubscribe"],"sources":["/Users/smantrala/Documents/GitHub/EasyDocs/node_modules/y-websocket/src/y-websocket.js"],"sourcesContent":["/**\n * @module provider/websocket\n */\n\n/* eslint-env browser */\n\nimport * as Y from 'yjs' // eslint-disable-line\nimport * as bc from 'lib0/broadcastchannel'\nimport * as time from 'lib0/time'\nimport * as encoding from 'lib0/encoding'\nimport * as decoding from 'lib0/decoding'\nimport * as syncProtocol from 'y-protocols/sync'\nimport * as authProtocol from 'y-protocols/auth'\nimport * as awarenessProtocol from 'y-protocols/awareness'\nimport { Observable } from 'lib0/observable'\nimport * as math from 'lib0/math'\nimport * as url from 'lib0/url'\n\nexport const messageSync = 0\nexport const messageQueryAwareness = 3\nexport const messageAwareness = 1\nexport const messageAuth = 2\n\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */\nconst messageHandlers = []\n\nmessageHandlers[messageSync] = (\n  encoder,\n  decoder,\n  provider,\n  emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageSync)\n  const syncMessageType = syncProtocol.readSyncMessage(\n    decoder,\n    encoder,\n    provider.doc,\n    provider\n  )\n  if (\n    emitSynced && syncMessageType === syncProtocol.messageYjsSyncStep2 &&\n    !provider.synced\n  ) {\n    provider.synced = true\n  }\n}\n\nmessageHandlers[messageQueryAwareness] = (\n  encoder,\n  _decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  encoding.writeVarUint(encoder, messageAwareness)\n  encoding.writeVarUint8Array(\n    encoder,\n    awarenessProtocol.encodeAwarenessUpdate(\n      provider.awareness,\n      Array.from(provider.awareness.getStates().keys())\n    )\n  )\n}\n\nmessageHandlers[messageAwareness] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  awarenessProtocol.applyAwarenessUpdate(\n    provider.awareness,\n    decoding.readVarUint8Array(decoder),\n    provider\n  )\n}\n\nmessageHandlers[messageAuth] = (\n  _encoder,\n  decoder,\n  provider,\n  _emitSynced,\n  _messageType\n) => {\n  authProtocol.readAuthMessage(\n    decoder,\n    provider.doc,\n    (_ydoc, reason) => permissionDeniedHandler(provider, reason)\n  )\n}\n\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000\n\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */\nconst permissionDeniedHandler = (provider, reason) =>\n  console.warn(`Permission denied to access ${provider.url}.\\n${reason}`)\n\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */\nconst readMessage = (provider, buf, emitSynced) => {\n  const decoder = decoding.createDecoder(buf)\n  const encoder = encoding.createEncoder()\n  const messageType = decoding.readVarUint(decoder)\n  const messageHandler = provider.messageHandlers[messageType]\n  if (/** @type {any} */ (messageHandler)) {\n    messageHandler(encoder, decoder, provider, emitSynced, messageType)\n  } else {\n    console.error('Unable to compute message')\n  }\n  return encoder\n}\n\n/**\n * @param {WebsocketProvider} provider\n */\nconst setupWS = (provider) => {\n  if (provider.shouldConnect && provider.ws === null) {\n    const websocket = new provider._WS(provider.url)\n    websocket.binaryType = 'arraybuffer'\n    provider.ws = websocket\n    provider.wsconnecting = true\n    provider.wsconnected = false\n    provider.synced = false\n\n    websocket.onmessage = (event) => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      const encoder = readMessage(provider, new Uint8Array(event.data), true)\n      if (encoding.length(encoder) > 1) {\n        websocket.send(encoding.toUint8Array(encoder))\n      }\n    }\n    websocket.onerror = (event) => {\n      provider.emit('connection-error', [event, provider])\n    }\n    websocket.onclose = (event) => {\n      provider.emit('connection-close', [event, provider])\n      provider.ws = null\n      provider.wsconnecting = false\n      if (provider.wsconnected) {\n        provider.wsconnected = false\n        provider.synced = false\n        // update awareness (all users except local left)\n        awarenessProtocol.removeAwarenessStates(\n          provider.awareness,\n          Array.from(provider.awareness.getStates().keys()).filter((client) =>\n            client !== provider.doc.clientID\n          ),\n          provider\n        )\n        provider.emit('status', [{\n          status: 'disconnected'\n        }])\n      } else {\n        provider.wsUnsuccessfulReconnects++\n      }\n      // Start with no reconnect timeout and increase timeout by\n      // using exponential backoff starting with 100ms\n      setTimeout(\n        setupWS,\n        math.min(\n          math.pow(2, provider.wsUnsuccessfulReconnects) * 100,\n          provider.maxBackoffTime\n        ),\n        provider\n      )\n    }\n    websocket.onopen = () => {\n      provider.wsLastMessageReceived = time.getUnixTime()\n      provider.wsconnecting = false\n      provider.wsconnected = true\n      provider.wsUnsuccessfulReconnects = 0\n      provider.emit('status', [{\n        status: 'connected'\n      }])\n      // always send sync step 1 when connected\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageSync)\n      syncProtocol.writeSyncStep1(encoder, provider.doc)\n      websocket.send(encoding.toUint8Array(encoder))\n      // broadcast local awareness state\n      if (provider.awareness.getLocalState() !== null) {\n        const encoderAwarenessState = encoding.createEncoder()\n        encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n        encoding.writeVarUint8Array(\n          encoderAwarenessState,\n          awarenessProtocol.encodeAwarenessUpdate(provider.awareness, [\n            provider.doc.clientID\n          ])\n        )\n        websocket.send(encoding.toUint8Array(encoderAwarenessState))\n      }\n    }\n\n    provider.emit('status', [{\n      status: 'connecting'\n    }])\n  }\n}\n\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */\nconst broadcastMessage = (provider, buf) => {\n  if (provider.wsconnected) {\n    /** @type {WebSocket} */ (provider.ws).send(buf)\n  }\n  if (provider.bcconnected) {\n    bc.publish(provider.bcChannel, buf, provider)\n  }\n}\n\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */\nexport class WebsocketProvider extends Observable {\n  /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} [opts]\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   * @param {number} [opts.maxBackoffTime] Maximum amount of time to wait before trying to reconnect (we try to reconnect using exponential backoff)\n   * @param {boolean} [opts.disableBc] Disable cross-tab BroadcastChannel communication\n   */\n  constructor (serverUrl, roomname, doc, {\n    connect = true,\n    awareness = new awarenessProtocol.Awareness(doc),\n    params = {},\n    WebSocketPolyfill = WebSocket,\n    resyncInterval = -1,\n    maxBackoffTime = 2500,\n    disableBc = false\n  } = {}) {\n    super()\n    // ensure that url is always ends with /\n    while (serverUrl[serverUrl.length - 1] === '/') {\n      serverUrl = serverUrl.slice(0, serverUrl.length - 1)\n    }\n    const encodedParams = url.encodeQueryParams(params)\n    this.maxBackoffTime = maxBackoffTime\n    this.bcChannel = serverUrl + '/' + roomname\n    this.url = serverUrl + '/' + roomname +\n      (encodedParams.length === 0 ? '' : '?' + encodedParams)\n    this.roomname = roomname\n    this.doc = doc\n    this._WS = WebSocketPolyfill\n    this.awareness = awareness\n    this.wsconnected = false\n    this.wsconnecting = false\n    this.bcconnected = false\n    this.disableBc = disableBc\n    this.wsUnsuccessfulReconnects = 0\n    this.messageHandlers = messageHandlers.slice()\n    /**\n     * @type {boolean}\n     */\n    this._synced = false\n    /**\n     * @type {WebSocket?}\n     */\n    this.ws = null\n    this.wsLastMessageReceived = 0\n    /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */\n    this.shouldConnect = connect\n\n    /**\n     * @type {number}\n     */\n    this._resyncInterval = 0\n    if (resyncInterval > 0) {\n      this._resyncInterval = /** @type {any} */ (setInterval(() => {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n          // resend sync step 1\n          const encoder = encoding.createEncoder()\n          encoding.writeVarUint(encoder, messageSync)\n          syncProtocol.writeSyncStep1(encoder, doc)\n          this.ws.send(encoding.toUint8Array(encoder))\n        }\n      }, resyncInterval))\n    }\n\n    /**\n     * @param {ArrayBuffer} data\n     * @param {any} origin\n     */\n    this._bcSubscriber = (data, origin) => {\n      if (origin !== this) {\n        const encoder = readMessage(this, new Uint8Array(data), false)\n        if (encoding.length(encoder) > 1) {\n          bc.publish(this.bcChannel, encoding.toUint8Array(encoder), this)\n        }\n      }\n    }\n    /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */\n    this._updateHandler = (update, origin) => {\n      if (origin !== this) {\n        const encoder = encoding.createEncoder()\n        encoding.writeVarUint(encoder, messageSync)\n        syncProtocol.writeUpdate(encoder, update)\n        broadcastMessage(this, encoding.toUint8Array(encoder))\n      }\n    }\n    this.doc.on('update', this._updateHandler)\n    /**\n     * @param {any} changed\n     * @param {any} _origin\n     */\n    this._awarenessUpdateHandler = ({ added, updated, removed }, _origin) => {\n      const changedClients = added.concat(updated).concat(removed)\n      const encoder = encoding.createEncoder()\n      encoding.writeVarUint(encoder, messageAwareness)\n      encoding.writeVarUint8Array(\n        encoder,\n        awarenessProtocol.encodeAwarenessUpdate(awareness, changedClients)\n      )\n      broadcastMessage(this, encoding.toUint8Array(encoder))\n    }\n    this._unloadHandler = () => {\n      awarenessProtocol.removeAwarenessStates(\n        this.awareness,\n        [doc.clientID],\n        'window unload'\n      )\n    }\n    if (typeof window !== 'undefined') {\n      window.addEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.on('exit', this._unloadHandler)\n    }\n    awareness.on('update', this._awarenessUpdateHandler)\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      if (\n        this.wsconnected &&\n        messageReconnectTimeout <\n          time.getUnixTime() - this.wsLastMessageReceived\n      ) {\n        // no message received in a long time - not even your own awareness\n        // updates (which are updated every 15 seconds)\n        /** @type {WebSocket} */ (this.ws).close()\n      }\n    }, messageReconnectTimeout / 10))\n    if (connect) {\n      this.connect()\n    }\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get synced () {\n    return this._synced\n  }\n\n  set synced (state) {\n    if (this._synced !== state) {\n      this._synced = state\n      this.emit('synced', [state])\n      this.emit('sync', [state])\n    }\n  }\n\n  destroy () {\n    if (this._resyncInterval !== 0) {\n      clearInterval(this._resyncInterval)\n    }\n    clearInterval(this._checkInterval)\n    this.disconnect()\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('unload', this._unloadHandler)\n    } else if (typeof process !== 'undefined') {\n      process.off('exit', this._unloadHandler)\n    }\n    this.awareness.off('update', this._awarenessUpdateHandler)\n    this.doc.off('update', this._updateHandler)\n    super.destroy()\n  }\n\n  connectBc () {\n    if (this.disableBc) {\n      return\n    }\n    if (!this.bcconnected) {\n      bc.subscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = true\n    }\n    // send sync step1 to bc\n    // write sync step 1\n    const encoderSync = encoding.createEncoder()\n    encoding.writeVarUint(encoderSync, messageSync)\n    syncProtocol.writeSyncStep1(encoderSync, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderSync), this)\n    // broadcast local state\n    const encoderState = encoding.createEncoder()\n    encoding.writeVarUint(encoderState, messageSync)\n    syncProtocol.writeSyncStep2(encoderState, this.doc)\n    bc.publish(this.bcChannel, encoding.toUint8Array(encoderState), this)\n    // write queryAwareness\n    const encoderAwarenessQuery = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessQuery, messageQueryAwareness)\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessQuery),\n      this\n    )\n    // broadcast local awareness state\n    const encoderAwarenessState = encoding.createEncoder()\n    encoding.writeVarUint(encoderAwarenessState, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoderAwarenessState,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ])\n    )\n    bc.publish(\n      this.bcChannel,\n      encoding.toUint8Array(encoderAwarenessState),\n      this\n    )\n  }\n\n  disconnectBc () {\n    // broadcast message with local awareness state set to null (indicating disconnect)\n    const encoder = encoding.createEncoder()\n    encoding.writeVarUint(encoder, messageAwareness)\n    encoding.writeVarUint8Array(\n      encoder,\n      awarenessProtocol.encodeAwarenessUpdate(this.awareness, [\n        this.doc.clientID\n      ], new Map())\n    )\n    broadcastMessage(this, encoding.toUint8Array(encoder))\n    if (this.bcconnected) {\n      bc.unsubscribe(this.bcChannel, this._bcSubscriber)\n      this.bcconnected = false\n    }\n  }\n\n  disconnect () {\n    this.shouldConnect = false\n    this.disconnectBc()\n    if (this.ws !== null) {\n      this.ws.close()\n    }\n  }\n\n  connect () {\n    this.shouldConnect = true\n    if (!this.wsconnected && this.ws === null) {\n      setupWS(this)\n      this.connectBc()\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}